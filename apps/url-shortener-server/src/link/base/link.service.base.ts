/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Link as PrismaLink,
  AccessLog as PrismaAccessLog,
  Metric as PrismaMetric,
} from "@prisma/client";

export class LinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LinkCountArgs, "select">): Promise<number> {
    return this.prisma.link.count(args);
  }

  async links(args: Prisma.LinkFindManyArgs): Promise<PrismaLink[]> {
    return this.prisma.link.findMany(args);
  }
  async link(args: Prisma.LinkFindUniqueArgs): Promise<PrismaLink | null> {
    return this.prisma.link.findUnique(args);
  }
  async createLink(args: Prisma.LinkCreateArgs): Promise<PrismaLink> {
    return this.prisma.link.create(args);
  }
  async updateLink(args: Prisma.LinkUpdateArgs): Promise<PrismaLink> {
    return this.prisma.link.update(args);
  }
  async deleteLink(args: Prisma.LinkDeleteArgs): Promise<PrismaLink> {
    return this.prisma.link.delete(args);
  }

  async findAccessLogs(
    parentId: string,
    args: Prisma.AccessLogFindManyArgs
  ): Promise<PrismaAccessLog[]> {
    return this.prisma.link
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessLogs(args);
  }

  async findMetrics(
    parentId: string,
    args: Prisma.MetricFindManyArgs
  ): Promise<PrismaMetric[]> {
    return this.prisma.link
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .metrics(args);
  }

  async getAccessLog(parentId: string): Promise<PrismaAccessLog | null> {
    return this.prisma.link
      .findUnique({
        where: { id: parentId },
      })
      .accessLog();
  }
}
